variables:
  CACHE_VERSION: 20201102

schedules:
  # nightly builds to populate caches
  - cron: "3 0 * * Mon"
    displayName: Weekly midnight build
    branches:
      include:
      - main
    always: true
  - cron: "3 0 * * Tue-Sat,Sun"
    displayName: Daily midnight build
    branches:
      include:
      - main

stages:
- stage: prepare
  displayName: Prepare
  jobs:
  - job: setup
    displayName: static analysis
    pool:
      vmImage: ubuntu-20.04
    steps:
      - checkout: none

      # Use Python >=3.7 for syntax validation
      - task: UsePythonVersion@0
        displayName: Set up python
        inputs:
          versionSpec: 3.7

      # Run syntax validation on a shallow clone
      - bash: |
          set -eux
          mkdir repository
          cd repository
          echo Checking out $(Build.SourceBranch) from $(Build.Repository.Uri)
          git init
          git remote add origin $(Build.Repository.Uri)
          git fetch --depth 1 --no-recurse-submodules origin $(Build.SourceBranch)
          git checkout FETCH_HEAD
          python .azure-pipelines/syntax-validation.py
        displayName: Syntax validation

      - bash: |
          set -eux
          pip install flake8
          cd repository
          python .azure-pipelines/flake8-validation.py
        displayName: Flake8 validation

      # Set up constants for further build steps
      - bash: |
          set -eux
          echo "##vso[task.setvariable variable=BUILD_REPOSITORY_NAME;isOutput=true]${BUILD_REPOSITORY_NAME}"
          echo "##vso[task.setvariable variable=BUILD_SOURCEBRANCH;isOutput=true]${BUILD_SOURCEBRANCH}"
          echo "##vso[task.setvariable variable=CURRENT_WEEK;isOutput=true]$(date +W%W)"
          echo "##vso[task.setvariable variable=TODAY_ISO;isOutput=true]$(date +%Y%m%d)"
          echo
          echo "Checking for waiting newsfragments:"
          cd repository/newsfragments
          \ls -1 --color=never | grep -v "^\([0-9]\+\|README\)\." && {
          echo "##vso[task.setvariable variable=NEWSFRAGMENT_WAITING;isOutput=true]true"
          } || {
          echo "none found"
          echo "##vso[task.setvariable variable=NEWSFRAGMENT_WAITING;isOutput=true]false"
          }
        displayName: Set up build constants
        name: constants

- stage: build
  displayName: Build & Test
  dependsOn:
  - prepare
  condition: and(succeeded(),
                 eq(dependencies.prepare.outputs['setup.constants.NEWSFRAGMENT_WAITING'], 'false'))
  jobs:
    - template: .azure-pipelines/azure-pipelines-linux.yml
    - template: .azure-pipelines/azure-pipelines-mac.yml
    - template: .azure-pipelines/azure-pipelines-windows.yml

- stage: summary
  displayName: Summary
  dependsOn:
  - prepare
  - build
  condition: and(succeeded(),
                 eq(dependencies.prepare.outputs['setup.constants.NEWSFRAGMENT_WAITING'], 'false'),
                 startsWith(dependencies.prepare.outputs['setup.constants.BUILD_SOURCEBRANCH'], 'refs/pull/'))
  jobs:
    - job: pr
      displayName: Ready to merge
      pool:
        vmImage: ubuntu-20.04
      steps:
        - checkout: none

    - job: xfel
      displayName: XFEL regression tests
      pool:
        vmImage: ubuntu-20.04
      steps:
        - checkout: none
        - task: DownloadPipelineArtifact@2
          inputs:
            patterns: "*/xfel-regression.*"
            path: $(Pipeline.Workspace)/artifacts
        - bash: |
            set -eu
            for D in *; do
              echo "##[group]${D}"
              cat "${D}/xfel-regression.txt"
              echo "##[endgroup]"
              cat "${D}/xfel-regression.output"
              echo
            done
          workingDirectory: $(Pipeline.Workspace)/artifacts
