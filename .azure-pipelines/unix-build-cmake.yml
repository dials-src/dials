# Variables:
#   CACHE_VERSION: unique cache identifier
#   CURRENT_WEEK: weekly changing cache identifier
#   PYTHON_VERSION: string in the form of "3.x"
#   TODAY_ISO: today's date in ISO format, eg. "20200531"
#   isPullRequest: whether this is a pull request build

parameters:
- name: conda_environment
  type: string

steps:

# Obtain a shallow clone of the DIALS repository.
# DIALS will not be able to report proper version numbers
- checkout: self
  path: ./modules/dials
  fetchDepth: 1
  displayName: Checkout $(Build.SourceBranch)

# Create a new conda environment using the bootstrap script
- script: |
    set -eux
    echo "pycbf
    cmake
    ninja
    pytest-azurepipelines
    dials-data
    pytest-cov
    pytest-timeout" >> modules/dials/${{ parameters.conda_environment }}
    python modules/dials/installer/bootstrap.py base --clean --python $(PYTHON_VERSION)
  displayName: Create python $(PYTHON_VERSION) environment
  workingDirectory: $(Pipeline.Workspace)

- bash: echo "##vso[task.prependpath]$CONDA/bin"
  displayName: Add conda to PATH

# Build and install dxtbx
- script: |
    set -euo pipefail
    source conda_base/etc/profile.d/conda.sh
    conda activate conda_base/
    git clone https://github.com/cctbx/dxtbx ./modules/dxtbx
    mkdir build_dxtbx
    cd build_dxtbx
    cmake ../modules/dxtbx -DCMAKE_UNITY_BUILD=true -GNinja
    cmake --build . --config Release
    cmake --install . --config Release
    pip install ../modules/dxtbx
    cd ..
    rm -rf build_dxtbx
  displayName: dxtbx Build/Install
  workingDirectory: $(Pipeline.Workspace)

# Build DIALS using the bootstrap script
- bash: |
    set -euxo pipefail
    source conda_base/etc/profile.d/conda.sh
    conda activate conda_base/
    set -x
    export CXXFLAGS="-isystem$(Pipeline.Workspace)/conda_base ${CXXFLAGS:-}"
    mkdir build_dials
    cd build_dials
    cmake ../modules/dials -DCMAKE_UNITY_BUILD=true -GNinja
    cmake --build . --config Release
    cmake --install . --config Release
    # Until we have worked around the existence of this file, pretend it doesn't exist
    rm -rf ../modules/dials/src/dials/tests
    pip install ../modules/dials
  displayName: DIALS Build/Install
  workingDirectory: $(Pipeline.Workspace)

# Extract the dials-data version so we can correctly cache regression data.
- bash: |
    set -euxo pipefail
    source conda_base/etc/profile.d/conda.sh
    conda activate conda_base/
    echo "##vso[task.setvariable variable=DIALS_DATA_VERSION_FULL]$(dials.data info -v | grep version.full)"
    echo "##vso[task.setvariable variable=DIALS_DATA_VERSION]$(dials.data info -v | grep version.major_minor)"
    mkdir -p data
  displayName: Determine dials.data version
  workingDirectory: $(Pipeline.Workspace)

# Retrieve the regression data from cache if possible
# The cache allows day-to-day incremental updates, which is relevant only if
# tests are added that refer to datasets in dials-data that were not previously
# referred to.
# New versions of dials-data also lead to cache updates, kick-started from the
# previous cache version.
# The cache is shared across operating systems and python versions, and flushed
# once a week and for dials-data major and minor releases (eg. 2.0->2.1).
# Since dials-data ensures cache coherence this should not be affected by the
# broken Azure cache bug.
- task: Cache@2
  inputs:
    key: '"data" | "$(CACHE_VERSION)-$(CURRENT_WEEK)" | "$(DIALS_DATA_VERSION)" | "$(TODAY_ISO)" | "$(DIALS_DATA_VERSION_FULL)"'
    restoreKeys: |
      "data" | "$(CACHE_VERSION)-$(CURRENT_WEEK)" | "$(DIALS_DATA_VERSION)" | "$(TODAY_ISO)"
      "data" | "$(CACHE_VERSION)-$(CURRENT_WEEK)" | "$(DIALS_DATA_VERSION)"
    path: $(Pipeline.Workspace)/data
    cacheHitVar: DATA_CACHED
  displayName: Restore regression data cache

# Finally, run the full regression test suite
- bash: |
    source conda_base/etc/profile.d/conda.sh
    conda activate conda_base/
    set -eux
    export DIALS_DATA=${PWD}/data
    export PYTHONDEVMODE=1
    cd modules/dials
    # These warnings are emitted by plugins before pytest loads the warning handlers
    export PYTHONWARNINGS='ignore:pkg_resources is deprecated as an API:DeprecationWarning,ignore:Deprecated call to `pkg_resources.declare_namespace:DeprecationWarning'
    pytest -v -ra -n auto --basetemp="$(Pipeline.Workspace)/tests" --durations=10 --dist loadgroup\
        --cov=$(pwd) --cov-report=html --cov-report=xml --cov-branch \
        --timeout=5400 --regression || echo "##vso[task.complete result=Failed;]Some tests failed"
  displayName: Run tests
  workingDirectory: $(Pipeline.Workspace)

- bash: bash <(curl -s https://codecov.io/bash) -t $(CODECOV_TOKEN) -n "Python $(PYTHON_VERSION) $(Agent.OS)"
  displayName: Publish coverage stats
  continueOnError: True
  timeoutInMinutes: 2
  workingDirectory: $(Pipeline.Workspace)/modules/dials

# Reclaim disk space after testing
# This is only relevant if we had cache misses, as free disk space is required to create the dials-data cache archive
- bash: |
    set -eu
    echo -e "\n##[section]Overall disk space usage:"
    df -h
    du -sh *
    echo -e "\n##[section]xfel-regression:"
    du -sh modules/xfel_regression || echo "xfel-regression not present"
    rm -rf modules/xfel_regression
    echo -e "\n##[section]Test artifacts:"
    du -h tests
    rm -rf tests
  displayName: Reclaim disk space
  workingDirectory: $(Pipeline.Workspace)
  condition: and(succeeded(), ne(variables.DATA_CACHED, 'true'))
