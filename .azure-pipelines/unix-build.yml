# Variables:
#   CURRENT_WEEK: weekly changing cache identifier
#   PYTHON_VERSION: string in the form of "3.x"
#   TODAY_ISO: today's date in ISO format, eg. "20200531"

steps:

# Obtain a shallow clone of the DIALS repository.
# DIALS will not be able to report proper version numbers
- checkout: self
  path: ./dials-checkout
  fetchDepth: 1
  displayName: Checkout $(Build.SourceBranch)

# Copy libGL/libGLU into a place where they can be found during the
# build. We don't include system libraries so that we don't accidentally
# pick up libc and friends
- bash: |
    mkdir -p modules/lib
    cp -av /usr/lib/x86_64-linux-gnu/libGL.so* modules/lib
    cp -av /usr/lib/x86_64-linux-gnu/libGLU.so* modules/lib
  displayName: Set up GL/GLU libraries
  workingDirectory: $(Pipeline.Workspace)
  condition: eq(variables['Agent.OS'], 'Linux')

# Download source repositories using the bootstrap script
- bash: |
    set -e
    mkdir -p modules
    ln -nsf ../dials-checkout modules/dials
    python modules/dials/installer/bootstrap.py update
  displayName: Repository checkout
  workingDirectory: $(Pipeline.Workspace)

# Create a new conda environment using the bootstrap script
- script: |
    set -e
    python modules/dials/installer/bootstrap.py base --python $(PYTHON_VERSION)

    # Immediately recover disk space used by miniconda installation
    du -sh miniconda
    rm -r miniconda
  displayName: Create python $(PYTHON_VERSION) environment
  workingDirectory: $(Pipeline.Workspace)

# Copy GL/GLU/KHR headers into a place where they can be found during the
# build. We don't include system headers so that we don't accidentally
# pick up libc and friends
- bash: |
    set -e
    mkdir -p build/include
    cp -av /usr/include/GL build/include
    cp -av /usr/include/KHR build/include
  displayName: Set up GL/GLU headers
  workingDirectory: $(Pipeline.Workspace)
  condition: eq(variables['Agent.OS'], 'Linux')

# Build DIALS using the bootstrap script
- bash: |
    set -e
    python modules/dials/installer/bootstrap.py build
    cp -v dials build/activate  # ensure a copy is kept in the cache
  displayName: DIALS build
  workingDirectory: $(Pipeline.Workspace)

# Ensure we are using up-to-date testing packages.
# Extract the dials-data version so we can correctly cache regression data.
- bash: |
    set -e
    . dials
    conda install -p conda_base -y dials-data pytest-azurepipelines pytest-cov pytest-timeout
    dials.data info -v
    echo "##vso[task.setvariable variable=DIALS_DATA_VERSION_FULL]$(dials.data info -v | grep version.full)"
    echo "##vso[task.setvariable variable=DIALS_DATA_VERSION]$(dials.data info -v | grep version.major)"
    #                                                                this is a bug in dials-data ^^^^^
    mkdir -p data
  displayName: Install additional packages
  workingDirectory: $(Pipeline.Workspace)

# Retrieve the regression data from cache if possible
# The cache allows day-to-day incremental updates, which is relevant only if
# tests are added that refer to datasets in dials-data that were not previously
# referred to.
# New versions of dials-data also lead to cache updates, kick-started from the
# previous cache version.
# The cache is shared across operating systems and python versions, and flushed
# once a week and for dials-data major and minor releases (eg. 2.0->2.1).
# Since dials-data ensures cache coherence this should not be affected by the
# broken Azure cache bug.
- task: Cache@2
  inputs:
    key: '"data" | "$(CACHE_VERSION)-$(CURRENT_WEEK)" | "$(DIALS_DATA_VERSION)" | "$(TODAY_ISO)" | "$(DIALS_DATA_VERSION_FULL)"'
    restoreKeys: |
      "data" | "$(CACHE_VERSION)-$(CURRENT_WEEK)" | "$(DIALS_DATA_VERSION)" | "$(TODAY_ISO)"
      "data" | "$(CACHE_VERSION)-$(CURRENT_WEEK)" | "$(DIALS_DATA_VERSION)"
    path: $(Pipeline.Workspace)/data
    cacheHitVar: DATA_CACHED
  displayName: Restore regression data cache

# Finally, run the full regression test suite
- bash: |
    set -e
    export DIALS_DATA=$(pwd)/data
    . dials
    cd modules/dials
    pytest -v -ra -n auto --basetemp="$(Pipeline.Workspace)/tests" --durations=10 \
        --cov=$(pwd) --cov-report=html --cov-report=xml --cov-branch \
        --timeout=5400 --regression --runslow || echo "##vso[task.complete result=Failed;]Some tests failed"
  displayName: Run tests
  workingDirectory: $(Pipeline.Workspace)

- bash: |
    bash <(curl -s https://codecov.io/bash) -v -n "Python $(PYTHON_VERSION) $(Agent.OS)"
  displayName: Publish coverage stats
  continueOnError: True
  timeoutInMinutes: 2
  workingDirectory: $(Pipeline.Workspace)/modules/dials

# Recover disk space after testing
# This is only relevant if we had cache misses, as free disk space is required to create cache archives
- bash: |
    echo Disk space usage:
    df -h
    du -sh *
    echo
    echo Test artefacts:
    du -h tests
    rm -rf tests
  displayName: Recover disk space
  workingDirectory: $(Pipeline.Workspace)
  condition: ne(variables.DATA_CACHED, 'true')
