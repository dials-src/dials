# Variables:
#   CACHE_VERSION: unique cache identifier
#   CURRENT_WEEK: weekly changing cache identifier
#   PYTHON_VERSION: string in the form of "3.x"
#   TODAY_ISO: today's date in ISO format, eg. "20200531"

steps:

# Downgrade the installed vs2017+ to 2015, as cbflib_adaptbx won't build otherwise
# This takes up 5 minutes of uncacheable build time :(
- script: |
    choco install microsoft-visual-cpp-build-tools
  displayName: Install MSVC 2015 Build Tools

# Obtain a shallow clone of the DIALS repository.
# DIALS will not be able to report proper version numbers
- checkout: self
  path: dials-checkout
  fetchDepth: 1
  displayName: Checkout $(Build.SourceBranch)

# Get all other source repositories from cache if available
# Allow day-to-day incremental cache updates
# Flush the cache once a week and whenever the bootstrap script is modified
- task: Cache@2
  inputs:
    key: '"repositories" | "$(CACHE_VERSION)-$(CURRENT_WEEK)" | installer/bootstrap.py | "$(TODAY_ISO)"'
    restoreKeys: |
      "repositories" | "$(CACHE_VERSION)-$(CURRENT_WEEK)" | installer/bootstrap.py
    path: $(Pipeline.Workspace)/modules
    cacheHitVar: REPOSITORIES_CACHED
  displayName: Restore repository cache

# If other source repositories are not cached then download
# them using the bootstrap script
- powershell: |
    New-Item -Force -ItemType Directory -Path modules
    New-Item -Force -ItemType SymbolicLink -Path modules\dials -Value dials-checkout
    set PYTHONUNBUFFERED=TRUE
    python.exe modules\dials\installer\bootstrap.py update
  displayName: Repository checkout (initial)
  failOnStderr: true
  workingDirectory: $(Pipeline.Workspace)
  condition: eq(variables.REPOSITORIES_CACHED, 'false')

# Update the cctbx_project and dxtbx repositories now,
# unless they were just freshly cloned
- script: |
    echo
    echo Checking out latest cctbx_project commit
    cd $(Pipeline.Workspace)/modules/cctbx_project
    git fetch upstream master --depth=1
    git checkout FETCH_HEAD
    echo
    echo Checking out latest dxtbx commit
    cd $(Pipeline.Workspace)/modules/dxtbx
    git fetch origin master --depth=1
    git checkout FETCH_HEAD
  displayName: Repository update (incremental)
  condition: ne(variables.REPOSITORIES_CACHED, 'false')

# # Get a ready-made DIALS conda environment from cache if available
# # Allow day-to-day incremental cache updates
# # Flush the cache once a week and whenever the environment specification is modified
# # Cache is not shared across operating systems and python versions
# # # Disabled as the generated cache is unrestorable due to some link issues
# - task: Cache@2
#   inputs:
#     key: '"base" | "$(CACHE_VERSION)-$(CURRENT_WEEK)" | "$(Agent.OS)-$(Agent.Version)" | "$(PYTHON_VERSION)" | ${{ parameters.conda_environment }} | "$(TODAY_ISO)"'
#     restoreKeys: |
#       "base" | "$(CACHE_VERSION)-$(CURRENT_WEEK)" | "$(Agent.OS)-$(Agent.Version)" | "$(PYTHON_VERSION)" | ${{ parameters.conda_environment }}
#     path: $(Pipeline.Workspace)/conda_base
#     cacheHitVar: BASE_CACHED
#   displayName: Restore environment cache

# If the conda environment could not be loaded from cache then
# create a new one using the bootstrap script
- script: |
    set PYTHONUNBUFFERED=TRUE
    python modules/dials/installer/bootstrap.py base --python $(PYTHON_VERSION)
  displayName: Create python $(PYTHON_VERSION) environment
  workingDirectory: $(Pipeline.Workspace)
# condition: eq(variables.BASE_CACHED, 'false')

# Get a ready-made DIALS build directory from cache if available
# Allow day-to-day incremental cache updates
# Flush the cache once a week and whenever the environment specification
# or the bootstrap script is modified.
# Cache is not shared across operating systems and python versions
- task: Cache@2
  inputs:
    key: '"build" | "$(CACHE_VERSION)-$(CURRENT_WEEK)" | "$(Agent.OS)-$(Agent.Version)" | "$(PYTHON_VERSION)" | installer/bootstrap.py | ${{ parameters.conda_environment }} | "$(TODAY_ISO)"'
    restoreKeys: |
      "build" | "$(CACHE_VERSION)-$(CURRENT_WEEK)" | "$(Agent.OS)-$(Agent.Version)" | "$(PYTHON_VERSION)" | installer/bootstrap.py | ${{ parameters.conda_environment }}
    path: $(Pipeline.Workspace)/build
    cacheHitVar: BUILD_CACHED
  displayName: Restore cached build

# If the build directory could not be loaded from cache then
# create a new one using the bootstrap script
- script: |
    REM -- generic VS path setter, but only works if it is the only installation:
    REM pushd "C:\Program Files (x86)\Microsoft Visual Studio\Installer\"
    REM for /f "delims=" %%x in ('.\vswhere.exe -latest -property InstallationPath') do set VSPATH=%%x
    REM popd
    REM call "%VSPATH%\VC\Auxiliary\Build\vcvarsall.bat" x64

    REM -- the above can be used once we start using the default compiler suite. Until then we need to:
    call "C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\bin\amd64\vcvars64.bat"

    python modules/dials/installer/bootstrap.py build
    REM -- ensure a copy of the environment loader is kept in the cache
    copy dials.bat build\activate.bat
  displayName: DIALS build (initial)
  workingDirectory: $(Pipeline.Workspace)
  condition: eq(variables.BUILD_CACHED, 'false')

# If the build directory was loaded (or kick-started) from cache then
# do an incremental build
- script: |
    REM -- generic VS path setter, but only works if it is the only installation:
    REM pushd "C:\Program Files (x86)\Microsoft Visual Studio\Installer\"
    REM for /f "delims=" %%x in ('.\vswhere.exe -latest -property InstallationPath') do set VSPATH=%%x
    REM popd
    REM call "%VSPATH%\VC\Auxiliary\Build\vcvarsall.bat" x64

    REM -- the above can be used once we start using the default compiler suite. Until then we need to:
    call "C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\bin\amd64\vcvars64.bat"

    REM -- restore copy of the environment loader from the cache
    copy build\activate.bat dials.bat
    call dials.bat
    cd build
    libtbx.refresh
    make
  displayName: DIALS build (incremental)
  workingDirectory: $(Pipeline.Workspace)
  condition: ne(variables.BUILD_CACHED, 'false')

# Ensure we are using up-to-date testing packages.
# Extract the dials-data version so we can correctly cache regression data.
- script: |
    call dials.bat
    conda install -y dials-data pytest-azurepipelines pytest-timeout
    dials.data info -v
    echo "##vso[task.setvariable variable=DIALS_DATA_VERSION_FULL]$(dials.data info -v | grep version.full)"
    echo "##vso[task.setvariable variable=DIALS_DATA_VERSION]$(dials.data info -v | grep version.major)"
    REM                                                              this is a bug in dials-data ^^^^^
    mkdir -p data
  displayName: Install additional packages
  workingDirectory: $(Pipeline.Workspace)

# # Retrieve the regression data from cache if possible
# # The cache allows day-to-day incremental updates, which is relevant only if
# # tests are added that refer to datasets in dials-data that were not previously
# # referred to.
# # New versions of dials-data also lead to cache updates, kick-started from the
# # previous cache version.
# # The cache is shared across operating systems and python versions, and flushed
# # once a week and for dials-data major and minor releases (eg. 2.0->2.1).
# - task: Cache@2
#   inputs:
#     key: '"data" | "$(CACHE_VERSION)-$(CURRENT_WEEK)" | "$(DIALS_DATA_VERSION)" | "$(TODAY_ISO)" | "$(DIALS_DATA_VERSION_FULL)"'
#     restoreKeys: |
#       "data" | "$(CACHE_VERSION)-$(CURRENT_WEEK)" | "$(DIALS_DATA_VERSION)" | "$(TODAY_ISO)"
#       "data" | "$(CACHE_VERSION)-$(CURRENT_WEEK)" | "$(DIALS_DATA_VERSION)"
#     path: $(Pipeline.Workspace)/data
#     cacheHitVar: DATA_CACHED
#   displayName: Restore regression data cache

- script: |
    set DIALS_DATA=$(Pipeline.Workspace)\data
    set PYTHONUNBUFFERED=TRUE

    call dials.bat
    cd modules/dials
    pytest -v -ra -n auto --basetemp="$(Pipeline.Workspace)\tests" --durations=10 --timeout=5400 || echo "##vso[task.complete result=Failed;]Some tests failed"
  displayName: Run some tests (temporary)
  workingDirectory: $(Pipeline.Workspace)

# Finally, run the full regression test suite
# - bash: |
#     set -e
#     export DIALS_DATA=$(pwd)/data
#     . dials
#     cd modules/dials
#     pytest -v -ra -n auto --basetemp="$(Pipeline.Workspace)/tests" --durations=10 \
#         --timeout=5400 --regression --runslow || echo "##vso[task.complete result=Failed;]Some tests failed"
#   displayName: Run tests
#   workingDirectory: $(Pipeline.Workspace)

# Recover disk space after testing
# This is only relevant if we had cache misses, as free disk space is required to create cache archives
- powershell: |
    echo "Disk space usage:"
    Get-ChildItem -Directory | ForEach-Object { "{1,10:N2} MB  {0:S}" -f $_, ((Get-ChildItem $_ -Recurse -ErrorAction SilentlyContinue | Measure-Object -Property Length -sum).sum / 1Mb) }

    echo ""
    echo "Build directory:"
    cd build
    Get-ChildItem -Directory | ForEach-Object { "{1,10:N2} MB  {0:S}" -f $_, ((Get-ChildItem $_ -Recurse -ErrorAction SilentlyContinue | Measure-Object -Property Length -sum).sum / 1Mb) }
    cd ..

    if (Test-Path -Path tests) {
      echo ""
      echo "Test artefacts:"
      cd tests
      Get-ChildItem -Directory | ForEach-Object { "{1,10:N2} MB  {0:S}" -f $_, ((Get-ChildItem $_ -Recurse -ErrorAction SilentlyContinue | Measure-Object -Property Length -sum).sum / 1Mb) }
      cd ..

      echo ""
      echo "Cleaning up test artefacts"
      Get-ChildItem -Path tests -Recurse -Force -ErrorAction SilentlyContinue | Where-Object { if($_.Attributes -match "ReparsePoint"){$_.Delete()} }
      Remove-Item -Path tests -Recurse -Force -ErrorAction SilentlyContinue
    }

    dir
  displayName: Recover disk space
  workingDirectory: $(Pipeline.Workspace)
# condition: or(ne(variables.BASE_CACHED, 'true'),
#               ne(variables.BUILD_CACHED, 'true'),
#               ne(variables.DATA_CACHED, 'true'),
#               ne(variables.REPOSITORIES_CACHED, 'true'))

# If the downloaded repositories are to be cached then clean them up before the
# snapshot is made
- powershell: |
    echo "Preparing repository cache"
    Get-ChildItem | ForEach-Object {
      if ($_.Name -match "dials") {
        echo "  - Skipping dials"
      } elseif ($_ -is [System.IO.FileInfo]) {
        echo "  - Deleting file $_.Name"
        Remove-Item $_
      } elseif (Test-Path -Path (Join-Path -Path $_ -ChildPath "git")) {
        if (($_.Name -match "cctbx_project") -or ($_.Name -match "dxtbx")) {
          echo "  - Cleaning up $_.Name"
          cd (Join-Path -Path $_ -ChildPath "git")
          git reset --hard HEAD
          git clean -dffxq
          git repack -a -d
          cd ..\..
        } else {
          echo "  - Removing version control from $_.Name"
          Remove-Item -Path (Join-Path -Path $_ -ChildPath "git") -Recurse -Force
        }
      }
    }
    echo "Completed"
    dir
  displayName: Preparing cache
  workingDirectory: $(Pipeline.Workspace)/modules
  condition: ne(variables.REPOSITORIES_CACHED, 'true')
