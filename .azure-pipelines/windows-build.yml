# Variables:
#   CACHE_VERSION: unique cache identifier
#   CURRENT_WEEK: weekly changing cache identifier
#   PYTHON_VERSION: string in the form of "3.x"
#   TODAY_ISO: today's date in ISO format, eg. "20200531"

steps:

# Obtain a shallow clone of the DIALS repository.
# DIALS will not be able to report proper version numbers
- checkout: self
  path: ./modules/dials
  fetchDepth: 1
  displayName: Checkout $(Build.SourceBranch)

- powershell: Write-Host "##vso[task.prependpath]$env:CONDA\Scripts"
  displayName: Add conda to PATH

# Create a new conda environment using the bootstrap script
- bash: |
    set -eux
    # Workaround from dxtbx pipeline:
    # Remove compilers from conda-env, as prebuilt cctbx appears to use
    # the system configured compilers and so the conda-forge settings conflict
    grep -v compiler modules/dials/.conda-envs/windows.txt > ci-conda-env.txt
    echo pycbf >> ci-conda-env.txt
    echo cmake >> ci-conda-env.txt
    mv ci-conda-env.txt modules/dials/.conda-envs/windows.txt

    python3 modules/dials/installer/bootstrap.py base --clean --python $(PYTHON_VERSION) --prebuilt-cctbx

  displayName: Create python $(PYTHON_VERSION) environment
  workingDirectory: $(Pipeline.Workspace)

# Build and install dxtbx
- script: |
    git clone https://github.com/cctbx/dxtbx ./modules/dxtbx
    call activate conda_base/
    mkdir build_dxtbx
    cd build_dxtbx
    cmake ../modules/dxtbx
    if %errorlevel% neq 0 exit /b %errorlevel%

    cmake --build . --config Release
    if %errorlevel% neq 0 exit /b %errorlevel%

    cmake --install . --config Release
    if %errorlevel% neq 0 exit /b %errorlevel%

    pip install ../modules/dxtbx
    if %errorlevel% neq 0 exit /b %errorlevel%

    cd ..
    rmdir -s -q build_dxtbx
  displayName: Build and install dxtbx
  workingDirectory: $(Pipeline.Workspace)


# Build DIALS using the bootstrap script
# - script: |
#     pushd "C:\Program Files (x86)\Microsoft Visual Studio\Installer\"
#     for /f "delims=" %%x in ('.\vswhere.exe -latest -property InstallationPath') do set VSPATH=%%x
#     popd
#     call "%VSPATH%\VC\Auxiliary\Build\vcvarsall.bat" x64

#     python modules/dials/installer/bootstrap.py build
#   displayName: DIALS build
#   workingDirectory: $(Pipeline.Workspace)

- script: |
    call activate conda_base/
    mkdir build_dials
    cd build_dials
    cmake ../modules/dials
    if %errorlevel% neq 0 exit /b %errorlevel%

    cmake --build . --config Release
    if %errorlevel% neq 0 exit /b %errorlevel%

    cmake --install . --config Release
    if %errorlevel% neq 0 exit /b %errorlevel%

    pip install ../modules/dials
    if %errorlevel% neq 0 exit /b %errorlevel%
  displayName: Build and install DIALS
  workingDirectory: $(Pipeline.Workspace)

# # Ensure we are using up-to-date testing packages.
# # Extract the dials-data version so we can correctly cache regression data.
# - script: |
#     call dials.bat
#     conda install -y dials-data pytest-azurepipelines pytest-timeout
#     dials.data info -v
#     echo "##vso[task.setvariable variable=DIALS_DATA_VERSION_FULL]$(dials.data info -v | grep version.full)"
#     echo "##vso[task.setvariable variable=DIALS_DATA_VERSION]$(dials.data info -v | grep version.major_minor)"
#     mkdir -p data
#   displayName: Install additional packages
#   workingDirectory: $(Pipeline.Workspace)

# # Retrieve the regression data from cache if possible
# # The cache allows day-to-day incremental updates, which is relevant only if
# # tests are added that refer to datasets in dials-data that were not previously
# # referred to.
# # New versions of dials-data also lead to cache updates, kick-started from the
# # previous cache version.
# # The cache is shared across operating systems and python versions, and flushed
# # once a week and for dials-data major and minor releases (eg. 2.0->2.1).
# - task: Cache@2
#   inputs:
#     key: '"data" | "$(CACHE_VERSION)-$(CURRENT_WEEK)" | "$(DIALS_DATA_VERSION)" | "$(TODAY_ISO)" | "$(DIALS_DATA_VERSION_FULL)"'
#     restoreKeys: |
#       "data" | "$(CACHE_VERSION)-$(CURRENT_WEEK)" | "$(DIALS_DATA_VERSION)" | "$(TODAY_ISO)"
#       "data" | "$(CACHE_VERSION)-$(CURRENT_WEEK)" | "$(DIALS_DATA_VERSION)"
#     path: $(Pipeline.Workspace)/data
#     cacheHitVar: DATA_CACHED
#   displayName: Restore regression data cache

# - script: |
#     set DIALS_DATA=$(Pipeline.Workspace)\data
#     set PYTHONDEVMODE=1
#     set PYTHONUNBUFFERED=TRUE
#     call dials.bat
#     cd modules/dials
#     libtbx.python -m pytest -v -ra -n auto --basetemp="$(Pipeline.Workspace)\tests" --durations=10 --dist loadgroup --timeout=5400 || echo "##vso[task.complete result=Failed;]Some tests failed"
#   displayName: Run some tests (temporary)
#   workingDirectory: $(Pipeline.Workspace)

# Finally, run the full regression test suite
# - bash: |
#     set -e
#     export DIALS_DATA=$(pwd)/data
#     . dials
#     cd modules/dials
#     pytest -v -ra -n auto --basetemp="$(Pipeline.Workspace)/tests" --durations=10 \
#         --timeout=5400 --regression || echo "##vso[task.complete result=Failed;]Some tests failed"
#   displayName: Run tests
#   workingDirectory: $(Pipeline.Workspace)

# Recover disk space after testing
# This is only relevant if we had cache misses, as free disk space is required to create cache archives
# - powershell: |
#     echo "Disk space usage:"
#     Get-ChildItem -Directory | ForEach-Object { "{1,10:N2} MB  {0:S}" -f $_, ((Get-ChildItem $_ -Recurse -ErrorAction SilentlyContinue | Measure-Object -ErrorAction SilentlyContinue -Property Length -sum).sum / 1Mb) }

#     echo ""
#     echo "Build directory:"
#     cd build
#     Get-ChildItem -Directory | ForEach-Object { "{1,10:N2} MB  {0:S}" -f $_, ((Get-ChildItem $_ -Recurse -ErrorAction SilentlyContinue | Measure-Object -ErrorAction SilentlyContinue -Property Length -sum).sum / 1Mb) }
#     cd ..

#     if (Test-Path -Path tests) {
#       echo ""
#       echo "Test artifacts:"
#       cd tests
#       Get-ChildItem -Directory | ForEach-Object { "{1,10:N2} MB  {0:S}" -f $_, ((Get-ChildItem $_ -Recurse -ErrorAction SilentlyContinue | Measure-Object -ErrorAction SilentlyContinue -Property Length -sum).sum / 1Mb) }
#       cd ..

#       echo ""
#       echo "Cleaning up test artifacts"
#       Get-ChildItem -Path tests -Recurse -Force -ErrorAction SilentlyContinue | Where-Object { if($_.Attributes -match "ReparsePoint"){$_.Delete()} }
#       Remove-Item -Path tests -Recurse -Force -ErrorAction SilentlyContinue
#     }

#     dir
#   displayName: Recover disk space
#   workingDirectory: $(Pipeline.Workspace)
# condition: ne(variables.DATA_CACHED, 'true')
